# Generated by Django 5.0.4 on 2024-09-22 12:42

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CopyTradeAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('name', models.CharField(max_length=100, verbose_name='Account name')),
                ('api_key', models.CharField(max_length=100, unique=True, verbose_name='API key')),
                ('api_secret', models.CharField(max_length=100, unique=True, verbose_name='API secret')),
                ('proxy', models.CharField(blank=True, max_length=100, null=True, verbose_name='Proxy')),
                ('use_proxy', models.BooleanField(default=False, verbose_name='Use proxy')),
                ('wallet_balance', models.FloatField(default=0.0, verbose_name='Wallet balance')),
            ],
            options={
                'verbose_name': 'Copy trade account',
                'verbose_name_plural': 'Copy trade accounts',
            },
        ),
        migrations.CreateModel(
            name='MainSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('take_profit_rate', models.FloatField(default=0.0, verbose_name='Take profit percent')),
                ('stop_loss_rate', models.FloatField(default=0.0, verbose_name='Stop loss percent')),
                ('trailing_stop_callback_rate', models.FloatField(default=0.0, verbose_name='Trailing stop price rate')),
                ('trailing_stop_activation_price_rate', models.FloatField(default=0.0, verbose_name='Trailing stop activation price rate')),
                ('short_position_limit', models.IntegerField(default=0, verbose_name='Short position limit')),
                ('long_position_limit', models.IntegerField(default=0, verbose_name='Long position limit')),
                ('bull_mode', models.BooleanField(default=False, verbose_name='Bull mode')),
                ('bear_mode', models.BooleanField(default=False, verbose_name='Bear mode')),
                ('signal_source_name', models.CharField(choices=[('rsi', 'RSI'), ('telegram', 'Telegram')], default='rsi', verbose_name='Signal source')),
                ('amount_usdt', models.FloatField(default=0.0, verbose_name='Amount in USDT')),
            ],
            options={
                'verbose_name': 'Main settings',
                'verbose_name_plural': 'Main settings',
            },
        ),
        migrations.CreateModel(
            name='MasterAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('name', models.CharField(max_length=100, verbose_name='Account name')),
                ('testnet', models.BooleanField(default=False, verbose_name='Testnet')),
                ('api_key', models.CharField(max_length=100, unique=True, verbose_name='API key')),
                ('api_secret', models.CharField(max_length=100, unique=True, verbose_name='API secret')),
                ('wallet_balance', models.FloatField(default=0.0, verbose_name='Wallet balance')),
            ],
            options={
                'verbose_name': 'Master account',
                'verbose_name_plural': 'Master accounts',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('position_side', models.CharField(help_text='ps, positionSide', max_length=10, verbose_name='Position side')),
                ('side', models.CharField(max_length=10, verbose_name='Side')),
                ('position_amt', models.FloatField(help_text='pa, positionAmt', verbose_name='Position amount')),
                ('entry_price', models.FloatField(help_text='ep, entryPrice', verbose_name='Entry price')),
                ('break_even_price', models.FloatField(help_text='bep, breakEvenPrice', verbose_name='Breakeven price')),
                ('unrealized_profit', models.FloatField(help_text='up, unRealizedProfit, unrealizedProfit', verbose_name='Unrealized profit')),
                ('acummulated_realized', models.FloatField(help_text='cr, (Pre-fee) Accumulated Realized', null=True, verbose_name='Accumulated realized profit')),
                ('notional', models.FloatField(help_text='notional', null=True, verbose_name='Notional')),
                ('mark_price', models.FloatField(help_text='markPrice', null=True, verbose_name='Mark price')),
                ('update_time', models.BigIntegerField(help_text='updateTime', null=True, verbose_name='Update time')),
                ('is_open', models.BooleanField(default=True, verbose_name='Is open')),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
            },
        ),
        migrations.CreateModel(
            name='Symbol',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('symbol', models.CharField(max_length=20, primary_key=True, serialize=False, unique=True)),
                ('data', models.JSONField(default=dict, verbose_name='Instrument data')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('leverage', models.IntegerField(default=20, verbose_name='Leverage')),
            ],
            options={
                'verbose_name': 'Symbol',
                'verbose_name_plural': 'Symbols',
            },
        ),
        migrations.CreateModel(
            name='PositionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
                ('take_profit_rate', models.FloatField(default=0.0, verbose_name='Take profit percent')),
                ('stop_loss_rate', models.FloatField(default=0.0, verbose_name='Stop loss percent')),
                ('trailing_stop_callback_rate', models.FloatField(default=0.0, verbose_name='Trailing stop price rate')),
                ('trailing_stop_activation_price_rate', models.FloatField(default=0.0, verbose_name='Trailing stop activation price rate')),
                ('position', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='exchange_binance.position')),
            ],
            options={
                'verbose_name': 'Position settings',
                'verbose_name_plural': 'Position settings',
            },
        ),
        migrations.AddField(
            model_name='position',
            name='symbol',
            field=models.ForeignKey(help_text='s, symbol', on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='exchange_binance.symbol'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.BigIntegerField(help_text='i, orderId', primary_key=True, serialize=False, verbose_name='Order Id')),
                ('client_order_id', models.CharField(help_text='c, clientOrderId', max_length=50, verbose_name='Client order ID')),
                ('status', models.CharField(help_text='X, status', max_length=50, verbose_name='Order status')),
                ('side', models.CharField(help_text='S, side. BUY or SELL', max_length=10, verbose_name='Side')),
                ('position_side', models.CharField(help_text='ps, positionSide. LONG, SHORT, BOTH', max_length=10, verbose_name='Position side')),
                ('order_type', models.CharField(help_text='o, type. MARKET, LIMIT, STOP_MARKET, TRAILING_STOP_MARKET etc.', max_length=20, verbose_name='Order type')),
                ('orig_qty', models.FloatField(help_text='q, origQty', verbose_name='Original quantity')),
                ('avg_price', models.FloatField(blank=True, help_text='ap, avgPrice', null=True, verbose_name='Average price')),
                ('working_type', models.CharField(help_text='wt, workingType', max_length=20, null=True, verbose_name='Stop price working type')),
                ('stop_price', models.FloatField(help_text='sp, stopPrice', null=True, verbose_name='Stop price')),
                ('time', models.BigIntegerField(help_text='T, time', verbose_name='Order trade time')),
                ('time_in_force', models.CharField(blank=True, help_text='f, timeInForce. GTC, IOC, FOK, GTX', max_length=10, null=True, verbose_name='Time in force')),
                ('close_position', models.BooleanField(help_text='cp, closePosition. If close all', null=True, verbose_name='Close position')),
                ('reduce_only', models.BooleanField(help_text='R, reduceOnly', null=True, verbose_name='Reduce only')),
                ('activation_price', models.FloatField(blank=True, help_text='AP, activatePrice', null=True, verbose_name='Activation price')),
                ('price_rate', models.FloatField(blank=True, help_text='cr, priceRate', null=True, verbose_name='Callback rate')),
                ('price', models.FloatField(blank=True, help_text='p, price', null=True, verbose_name='Original price')),
                ('orig_type', models.CharField(help_text='ot, origType', max_length=20, null=True, verbose_name='Original order type')),
                ('realized_profit', models.FloatField(help_text='rp', null=True, verbose_name='Realized profit')),
                ('execution_type', models.CharField(blank=True, help_text='x', max_length=10, null=True, verbose_name='Execution type')),
                ('last_filled_qty', models.FloatField(blank=True, help_text='l', null=True, verbose_name='Last filled quantity')),
                ('filled_accum_qty', models.FloatField(blank=True, help_text='z', null=True, verbose_name='Filled accumulated quantity')),
                ('last_filled_price', models.FloatField(blank=True, help_text='L', null=True, verbose_name='Last filled price')),
                ('commission_asset', models.CharField(blank=True, help_text='N. USDT', max_length=10, null=True, verbose_name='Commission asset')),
                ('commission', models.FloatField(blank=True, help_text='n', null=True, verbose_name='Commission')),
                ('trade_id', models.BigIntegerField(blank=True, help_text='t', null=True, verbose_name='Trade ID')),
                ('bids_notional', models.FloatField(blank=True, help_text='b', null=True, verbose_name='Bids notional')),
                ('ask_notional', models.FloatField(blank=True, help_text='a', null=True, verbose_name='Ask notional')),
                ('is_maker', models.BooleanField(help_text='m. Is this trade the maker side?', null=True, verbose_name='Is maker')),
                ('cum_quote', models.FloatField(blank=True, help_text='cumQuote', null=True, verbose_name='Cumulative quote')),
                ('update_time', models.BigIntegerField(blank=True, help_text='updateTime', null=True, verbose_name='Update time')),
                ('executed_qty', models.FloatField(blank=True, help_text='executedQty', null=True, verbose_name='Executed quantity')),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='exchange_binance.position')),
                ('symbol', models.ForeignKey(help_text='s, symbol', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='exchange_binance.symbol')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='CopyTradeOrder',
            fields=[
                ('order_id', models.BigIntegerField(help_text='i, orderId', primary_key=True, serialize=False, verbose_name='Order Id')),
                ('client_order_id', models.CharField(help_text='c, clientOrderId', max_length=50, verbose_name='Client order ID')),
                ('status', models.CharField(help_text='X, status', max_length=50, verbose_name='Order status')),
                ('side', models.CharField(help_text='S, side. BUY or SELL', max_length=10, verbose_name='Side')),
                ('position_side', models.CharField(help_text='ps, positionSide. LONG, SHORT, BOTH', max_length=10, verbose_name='Position side')),
                ('order_type', models.CharField(help_text='o, type. MARKET, LIMIT, STOP_MARKET, TRAILING_STOP_MARKET etc.', max_length=20, verbose_name='Order type')),
                ('orig_qty', models.FloatField(help_text='q, origQty', verbose_name='Original quantity')),
                ('avg_price', models.FloatField(blank=True, help_text='ap, avgPrice', null=True, verbose_name='Average price')),
                ('working_type', models.CharField(help_text='wt, workingType', max_length=20, null=True, verbose_name='Stop price working type')),
                ('stop_price', models.FloatField(help_text='sp, stopPrice', null=True, verbose_name='Stop price')),
                ('time', models.BigIntegerField(help_text='T, time', verbose_name='Order trade time')),
                ('time_in_force', models.CharField(blank=True, help_text='f, timeInForce. GTC, IOC, FOK, GTX', max_length=10, null=True, verbose_name='Time in force')),
                ('close_position', models.BooleanField(help_text='cp, closePosition. If close all', null=True, verbose_name='Close position')),
                ('reduce_only', models.BooleanField(help_text='R, reduceOnly', null=True, verbose_name='Reduce only')),
                ('activation_price', models.FloatField(blank=True, help_text='AP, activatePrice', null=True, verbose_name='Activation price')),
                ('price_rate', models.FloatField(blank=True, help_text='cr, priceRate', null=True, verbose_name='Callback rate')),
                ('price', models.FloatField(blank=True, help_text='p, price', null=True, verbose_name='Original price')),
                ('orig_type', models.CharField(help_text='ot, origType', max_length=20, null=True, verbose_name='Original order type')),
                ('realized_profit', models.FloatField(help_text='rp', null=True, verbose_name='Realized profit')),
                ('execution_type', models.CharField(blank=True, help_text='x', max_length=10, null=True, verbose_name='Execution type')),
                ('last_filled_qty', models.FloatField(blank=True, help_text='l', null=True, verbose_name='Last filled quantity')),
                ('filled_accum_qty', models.FloatField(blank=True, help_text='z', null=True, verbose_name='Filled accumulated quantity')),
                ('last_filled_price', models.FloatField(blank=True, help_text='L', null=True, verbose_name='Last filled price')),
                ('commission_asset', models.CharField(blank=True, help_text='N. USDT', max_length=10, null=True, verbose_name='Commission asset')),
                ('commission', models.FloatField(blank=True, help_text='n', null=True, verbose_name='Commission')),
                ('trade_id', models.BigIntegerField(blank=True, help_text='t', null=True, verbose_name='Trade ID')),
                ('bids_notional', models.FloatField(blank=True, help_text='b', null=True, verbose_name='Bids notional')),
                ('ask_notional', models.FloatField(blank=True, help_text='a', null=True, verbose_name='Ask notional')),
                ('is_maker', models.BooleanField(help_text='m. Is this trade the maker side?', null=True, verbose_name='Is maker')),
                ('cum_quote', models.FloatField(blank=True, help_text='cumQuote', null=True, verbose_name='Cumulative quote')),
                ('update_time', models.BigIntegerField(blank=True, help_text='updateTime', null=True, verbose_name='Update time')),
                ('executed_qty', models.FloatField(blank=True, help_text='executedQty', null=True, verbose_name='Executed quantity')),
                ('copy_trade_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='copy_trade_orders', to='exchange_binance.copytradeaccount')),
                ('master_order', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='copy_trade_orders', to='exchange_binance.order')),
                ('symbol', models.ForeignKey(help_text='s, symbol', on_delete=django.db.models.deletion.CASCADE, related_name='copy_trade_orders', to='exchange_binance.symbol')),
            ],
            options={
                'verbose_name': 'Copy trade order',
                'verbose_name_plural': 'Copy trade orders',
            },
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['client_order_id'], name='exchange_bi_client__9268cd_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['time'], name='exchange_bi_time_599070_idx'),
        ),
        migrations.AddIndex(
            model_name='copytradeorder',
            index=models.Index(fields=['client_order_id'], name='exchange_bi_client__3a5829_idx'),
        ),
        migrations.AddIndex(
            model_name='copytradeorder',
            index=models.Index(fields=['time'], name='exchange_bi_time_9296a7_idx'),
        ),
    ]
